================================================================================
MinerU LaTeX Converter 프로그램 사용 가이드
작성일: 2025-01-05
================================================================================

이 폴더에는 Word 문서를 LaTeX로 변환하고 다시 Word로 재구성하는 여러 버전의 프로그램이 있습니다.
각 프로그램의 용도와 사용방법을 설명합니다.

================================================================================
1. lw.py - 메인 변환 프로그램 (최신 버전)
================================================================================
용도: Word → PDF → LaTeX → Word (OMath 수식 포함) 전체 파이프라인
특징: 한글 텍스트 보존, 수식 OMath 변환, 3패널 HTML 뷰어 생성

사용법:
python lw.py [입력파일.docx]

예시:
python lw.py test_document.docx
python lw.py "내 문서.docx"

출력:
- word_output_[타임스탬프]/ 폴더에 모든 결과물 저장
- 01_temp.pdf: Word에서 변환된 PDF
- 02_images/: 추출된 이미지들
- 03_layout_results.json: 레이아웃 분석 결과
- 04_formulas/: 수식 이미지와 LaTeX 변환 결과
- 05_combined_results.json: 텍스트와 수식 통합 데이터
- 06_final_document.docx: 최종 Word 문서
- 07_final_result.html: 3패널 뷰어 (고급 기능 포함)

================================================================================
2. ln.py - 이전 버전 (안정화 버전)
================================================================================
용도: lw.py의 이전 버전, 더 간단한 HTML 뷰어 생성
특징: 기본적인 변환 기능, position_based_viewer.html 스타일 뷰어

사용법:
python ln.py [입력파일.docx]

출력 구조는 lw.py와 유사하나, HTML 뷰어가 더 복잡한 기능을 포함

================================================================================
3. my_word_to_word_converter.py - 초기 버전
================================================================================
용도: 기본적인 Word to Word 변환
특징: 단순 변환, HTML 뷰어 없음

사용법:
python my_word_to_word_converter.py input.docx

================================================================================
4. HTML 뷰어 파일들
================================================================================

a) final_working_viewer.html
   - 완전한 3패널 뷰어 (모든 기능 포함)
   - 패널별 줌 (25%-200%)
   - 마우스 드래그
   - 페이지 네비게이션
   - 동기화 ON/OFF
   - 내보내기 기능
   
   사용법: 브라우저에서 직접 열기
   단축키:
   - Ctrl+S: 동기화 토글
   - Ctrl+R: 전체 리셋
   - 좌/우 화살표: 페이지 이동
   - Ctrl+휠: 줌 인/아웃

b) real_working_viewer.html
   - 실제 작동 확인용 버전
   - 기본 3패널 구조
   - 줌과 드래그 기능
   
c) working_test.html / simple_test.html
   - 기능 테스트용 파일
   - MathJax 렌더링 테스트
   - 버튼 작동 테스트

================================================================================
5. 보조 스크립트들
================================================================================

a) simple_gemini.py
   사용법: python simple_gemini.py "질문"
   용도: Gemini API를 통한 AI 질의응답

b) perplexity_search.py
   사용법: python perplexity_search.py "검색어"
   용도: Perplexity API를 통한 웹 검색

c) search_wrapper.py
   사용법: 
   - python search_wrapper.py gemini "질문"
   - python search_wrapper.py perplexity "검색어"
   용도: 통합 검색 인터페이스

d) conversation_saver.py
   사용법:
   - python conversation_saver.py "저장할 내용"
   - python conversation_saver.py --auto
   용도: 대화 내용과 메타정보 저장

================================================================================
6. 주요 기능별 사용 시나리오
================================================================================

시나리오 1: Word 문서를 LaTeX 수식이 포함된 Word로 변환
1) python lw.py "내문서.docx"
2) word_output_[타임스탬프]/06_final_document.docx 확인
3) 07_final_result.html을 브라우저에서 열어 결과 검토

시나리오 2: 변환 결과 상세 검토
1) 생성된 HTML 파일을 브라우저에서 열기
2) 각 패널에서 줌 인/아웃으로 상세 확인
3) 페이지 네비게이션으로 전체 문서 검토
4) 동기화 ON으로 세 패널 동시 스크롤

시나리오 3: AI 도구 활용
1) 수식 관련 질문: python simple_gemini.py "이 수식의 의미는?"
2) 관련 자료 검색: python perplexity_search.py "LaTeX 수식 작성법"

================================================================================
7. 문제 해결
================================================================================

문제: ModuleNotFoundError
해결: pip install -r requirements.txt

문제: MinerU 실행 오류
해결: magic-pdf 설치 확인
     pip install magic-pdf

문제: 수식이 렌더링되지 않음
해결: 인터넷 연결 확인 (MathJax CDN 필요)

문제: Word 파일이 생성되지 않음
해결: python-docx 설치 확인
     pip install python-docx

================================================================================
8. 환경 설정
================================================================================

필수 패키지:
- magic-pdf (MinerU)
- nougat-latex-ocr
- python-docx
- PyMuPDF (fitz)
- Pillow
- numpy

가상환경 활성화:
source gemini_env/bin/activate  # Linux/Mac
gemini_env\Scripts\activate     # Windows

================================================================================
9. 출력 파일 구조
================================================================================

word_output_[타임스탬프]/
├── 01_temp.pdf                 # Word→PDF 변환 결과
├── 02_images/                  # 추출된 이미지들
│   ├── image_0_0.png
│   └── ...
├── 03_layout_results.json      # MinerU 레이아웃 분석
├── 04_formulas/                # 수식 처리 결과
│   ├── formula_images/         # 수식 이미지
│   └── latex_results.json      # LaTeX 변환 결과
├── 05_combined_results.json    # 통합 데이터
├── 06_final_document.docx      # 최종 Word 문서
└── 07_final_result.html        # 3패널 뷰어

================================================================================
10. 팁과 주의사항
================================================================================

- 한글이 포함된 파일명은 따옴표로 감싸기: "한글 파일명.docx"
- 대용량 문서는 처리 시간이 오래 걸릴 수 있음
- 복잡한 수식은 변환 정확도가 떨어질 수 있음
- HTML 뷰어는 Chrome, Edge에서 최적화됨
- 결과물은 타임스탬프가 포함된 폴더에 자동 저장됨

================================================================================